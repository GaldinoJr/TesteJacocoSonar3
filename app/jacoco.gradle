project.afterEvaluate {
    def flavors = android.productFlavors.collect { flavor -> flavor.name }

    // If there are no flavors defined, add empty flavor.
    if (!flavors) flavors.add('')

    def buildType = "Debug"
    flavors.each { productFlavorName ->
        def taskNameWithFlavor, pathNameWithFlavor
        if (!productFlavorName) {
            //empty flavors
            taskNameWithFlavor = pathNameWithFlavor = "${buildType}"
        }
        else {
            taskNameWithFlavor = "${productFlavorName}${buildType}"
            pathNameWithFlavor = "${productFlavorName}${buildType}"
        }
        def unitTestsTaskName = "test${taskNameWithFlavor.capitalize()}UnitTest"
        def uiTestsTaskName = "connected${taskNameWithFlavor.capitalize()}AndroidTest"

        // Create coverage task ex: 'jacocoTestReport<Flavor>' depending on
        // 'testFlavorDebugUnitTest - unit tests' & connectedFlavorDebugAndroidTest - integration tests.
        task "jacocoTestReport${productFlavorName.capitalize()}"(type: JacocoReport, dependsOn: [unitTestsTaskName, uiTestsTaskName]) {
            group = "Reporting"
            description = "Generate Jacoco coverage reports on the ${taskNameWithFlavor.capitalize()} build. Flavor: $pathNameWithFlavor"

            classDirectories = fileTree(
                    dir: "${project.buildDir}/tmp/kotlin-classes/$pathNameWithFlavor",
                    excludes: [
                            //packages
                            '**/domain/**',
                            '**/di/**',
                            '**/gps/**',
                            '**/extension/**',
                            '**/encrypt/**',
                            '**/view/**',
                            '**/preferences/**',
                            '**/firebase/**',
                            '**/mvp/**',
                            '**/androidutils/**',
                            //class
                            '**/MyApplication**',
                            '**/BuildConfig**',
                            '**/R*.class',
                            '**/*Dialog*',
                            '**/endpoint',
                            '**/Util**',
                            '**/AnimationUtil**',
                            '**/ToastUtil**',
                            '**/ImagePickerUtil**',
                            '**/MyKeyBoardUtilsControl**',
                            '**/App**',
                            '**/Constant**',
                            '**/SchedulerProvider**',
                            //names
                            '**/*Contract*',
                            '**/*Service*',
                            '**/*Tasks*',
                            '**/*Tasks*',
                            '**/*BroadcastReceiver*',
                            '**/*Adapter*'
                    ])

            def coverageSourceDirs = [
                    "src/main/java",
                    "src/$productFlavorName/java",
                    "src/$buildType/java"
            ]
            additionalSourceDirs = files(coverageSourceDirs)
            sourceDirectories = files(coverageSourceDirs)
            executionData = fileTree(dir: project.projectDir, includes: ["**/*.exec", "**/*.ec"])

            reports {
                xml.enabled = true
                html.enabled = true
            }
        }
    }
}